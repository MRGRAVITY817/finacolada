use {crate::utils::save_df_as_parquet, polars::prelude::*};

pub fn merge_sector_individual(
    sector_path: &str,
    indi_path: &str,
    output_path: &str,
) -> anyhow::Result<()> {
    // 1. Read parquets as LazyFrame
    let sector_df = LazyFrame::scan_parquet(sector_path, Default::default())?;
    let indi_df = LazyFrame::scan_parquet(indi_path, Default::default())?;
    // 2. Inner Join
    let mut merged = sector_df
        .inner_join(indi_df, col("issue_code"), col("issue_code"))
        .filter(col("issue_name").str().contains("스팩").not()) // filter out spac company
        .filter(col("issue_code").str().contains("0$")) // remove preferred stock that doesn't end with 0
        .collect()?;
    // 3. Save as parquet file
    let mut file = std::fs::File::create(output_path)?;
    ParquetWriter::new(&mut file).finish(&mut merged)?;

    Ok(())
}

pub fn merge_kospi_kosdaq(
    kospi_path: &str,
    kosdaq_path: &str,
    output_path: &str,
) -> anyhow::Result<()> {
    let mut merged = concat(
        &[
            LazyFrame::scan_parquet(kospi_path, Default::default())?,
            LazyFrame::scan_parquet(kosdaq_path, Default::default())?,
        ],
        true,
        true,
    )?
    .collect()?;

    save_df_as_parquet(output_path, &mut merged)
}

pub fn get_tickers(file_path: &str) -> anyhow::Result<Vec<String>> {
    let df = LazyFrame::scan_parquet(file_path, Default::default())?
        .select(&[col("issue_code")])
        .collect()?;

    let tickers_series = df
        .iter()
        .next()
        .ok_or(anyhow::Error::msg("Cannot get ticker value"))?;

    Ok(tickers_series.iter().map(|val| val.to_string()).collect())
}

#[cfg(test)]
mod test {
    use {super::*, insta::assert_snapshot};

    #[test]
    fn merged_kospi_table_has_no_spac_companies() {
        // Arrange
        let sector_path = "examples/krx_sector_kospi.parquet";
        let indi_path = "examples/krx_individual_kospi.parquet";
        let output_path = "examples/krx_merged_kospi.parquet";
        // Act
        merge_sector_individual(sector_path, indi_path, output_path).unwrap();
        // Assert
        let result = LazyFrame::scan_parquet(output_path, Default::default()).unwrap();
        assert_snapshot!(result
            .select([col("issue_name").filter(col("issue_name").str().contains("스팩"))])
            .collect()
            .unwrap().to_string(), 
            @r###"
        shape: (0, 1)
        ┌────────────┐
        │ issue_name │
        │ ---        │
        │ str        │
        ╞════════════╡
        └────────────┘
        "###)
    }

    #[test]
    fn merged_kosdaq_table() {
        // Arrange
        let sector_path = "examples/krx_sector_kosdaq.parquet";
        let indi_path = "examples/krx_individual_kosdaq.parquet";
        let output_path = "examples/krx_merged_kosdaq.parquet";
        // Act
        merge_sector_individual(sector_path, indi_path, output_path).unwrap();
        // Assert
        let result = LazyFrame::scan_parquet(output_path, Default::default()).unwrap();
        assert_snapshot!(result
            .select([col("issue_name")])
            .collect()
            .unwrap().to_string(), 
            @r###"
        shape: (1519, 1)
        ┌──────────────┐
        │ issue_name   │
        │ ---          │
        │ str          │
        ╞══════════════╡
        │ 3S           │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ APS홀딩스    │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ AP시스템     │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ AP위성       │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ ...          │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ 흥국         │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ 흥국에프엔비 │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ 희림         │
        ├╌╌╌╌╌╌╌╌╌╌╌╌╌╌┤
        │ 힘스         │
        └──────────────┘
        "###)
    }

    // #[test]
    // fn merged_table_should_not_contain_esoteric_issues() {
    //     // Arrange
    //     let sector_path = "examples/krx_sector_kospi.parquet";
    //     let indi_path = "examples/krx_individual_kospi.parquet";
    //     let output_path = "examples/krx_merged_kospi.parquet";
    //     // Act
    //     merge_sector_individual(sector_path, indi_path, output_path).unwrap();
    //     // Assert
    //     let result = LazyFrame::scan_parquet(output_path, Default::default()).unwrap();
    //     assert_snapshot!(result
    //         .select([col("issue_name").filter(col("issue_name").str().contains("SK리츠"))])
    //         .collect()
    //         .unwrap().to_string(),
    //         @r###"
    //     shape: (0, 1)
    //     ┌────────────┐
    //     │ issue_name │
    //     │ ---        │
    //     │ str        │
    //     ╞════════════╡
    //     └────────────┘
    //     "###)
    // }

    #[test]
    fn merged_table_should_contain_all_rows() {
        // Arrange
        let sector_path = "examples/krx_sector_kospi.parquet";
        let indi_path = "examples/krx_individual_kospi.parquet";
        let output_path = "examples/krx_merged_kospi.parquet";
        // Act
        merge_sector_individual(sector_path, indi_path, output_path).unwrap();
        // Assert
        let result = LazyFrame::scan_parquet(output_path, Default::default()).unwrap();
        assert_eq!(
            result
                .schema()
                .unwrap()
                .clone()
                .iter()
                .map(|(k, _)| k.to_owned())
                .collect::<Vec<String>>(),
            vec![
                "issue_code",
                "issue_name",
                "market_type",
                "industry",
                "closing_price",
                "compared",
                "fluctuation_rate",
                "market_cap",
                "issue_name_right",
                "closing_price_right",
                "compared_right",
                "fluctuation_rate_right",
                "eps",
                "per",
                "leading_eps",
                "leading_per",
                "bps",
                "pbr",
                "dps",
                "dyr"
            ]
        )
    }

    #[test]
    fn number_rows_in_merged_krx_table_equals_to_sum_of_kospi_and_kosdaq() {
        let kospi_path = "examples/krx_merged_kospi.parquet";
        let kosdaq_path = "examples/krx_merged_kosdaq.parquet";
        let output_path = "examples/krx_merged.parquet";

        merge_kospi_kosdaq(kospi_path, kosdaq_path, output_path).unwrap();

        let count_rows = |file_path: &str| -> String {
            LazyFrame::scan_parquet(file_path, Default::default())
                .unwrap()
                .select(&[count()])
                .collect()
                .unwrap()
                .to_string()
        };

        assert_snapshot!(count_rows(kospi_path), @r###"
        shape: (1, 1)
        ┌───────┐
        │ count │
        │ ---   │
        │ u32   │
        ╞═══════╡
        │ 796   │
        └───────┘
        "###);
        assert_snapshot!(count_rows(kosdaq_path), @r###"
        shape: (1, 1)
        ┌───────┐
        │ count │
        │ ---   │
        │ u32   │
        ╞═══════╡
        │ 1519  │
        └───────┘
        "###);
        assert_snapshot!(count_rows(output_path), @r###"
        shape: (1, 1)
        ┌───────┐
        │ count │
        │ ---   │
        │ u32   │
        ╞═══════╡
        │ 2315  │
        └───────┘
        "###);
    }

    #[test]
    fn get_latest_tickers() {
        let output_path = "examples/krx_merged_kospi.parquet";

        let result = get_tickers(output_path).unwrap();

        assert_snapshot!(result.join(", "), @r###""095570", "006840", "027410", "282330", "138930", "001460", "001040", "079160", "000120", "011150", "097950", "000590", "012030", "016610", "005830", "000990", "139130", "001530", "000210", "001880", "375500", "007340", "004840", "155660", "069730", "017940", "383220", "007700", "114090", "078930", "006360", "001250", "007070", "012630", "039570", "089470", "294870", "267250", "097230", "014790", "003580", "204320", "060980", "011200", "082740", "003560", "175330", "234080", "001060", "096760", "105560", "002380", "344820", "009070", "009440", "119650", "092220", "016380", "001390", "033180", "001940", "025000", "092230", "000040", "044450", "030200", "033780", "058850", "058860", "093050", "003550", "034220", "051900", "373220", "032640", "011070", "066570", "037560", "051910", "079550", "006260", "010120", "000680", "229640", "108320", "001120", "108670", "383800", "023150", "035420", "181710", "005940", "034310", "008260", "004250", "010060", "178920", "005490", "010950", "034120", "005090", "001380", "004060", "001770", "002360", "009160", "123700", "025530", "034730", "011790", "018670", "001740", "006120", "210980", "068400", "302440", "326030", "402340", "361610", "096770", "001510", "285130", "017670", "000660", "064960", "100840", "003570", "036530", "005610", "011810", "077970", "071970", "002820", "084870", "002710", "069260", "002900", "024070", "037270", "000500", "000860", "035250", "011420", "002100", "009450", "267290", "012320", "000050", "214390", "012610", "009140", "013580", "012200", "002140", "010130", "002240", "009290", "017040", "017900", "037710", "030610", "339770", "007690", "005320", "001140", "002720", "083420", "014530", "014280", "008870", "001570", "002990", "011780", "214330", "001210", "073240", "092440", "000270", "024110", "013700", "004540", "001260", "008350", "004270", "003920", "025860", "005720", "002350", "251270", "090350", "000320", "006280", "005250", "004370", "072710", "058730", "030210", "023590", "145210", "019680", "006370", "008060", "353200", "000490", "008110", "005750", "006570", "001680", "084690", "128820", "117580", "016710", "003540", "009190", "014160", "047040", "009320", "042660", "003090", "069620", "000430", "006340", "003220", "024890", "002880", "000300", "012800", "015230", "001070", "006650", "001440", "084010", "001790", "001130", "003490", "005880", "003830", "016090", "069460", "192080", "012510", "004830", "024900", "145720", "002150", "001230", "023450", "004140", "007590", "005960", "026960", "002210", "102260", "000640", "170900", "028100", "282690", "001520", "084670", "082640", "008970", "092780", "049770", "018500", "006040", "030720", "014820", "163560", "004890", "002690", "000020", "000150", "241560", "034020", "336260", "016740", "192650", "024090", "003160", "092200", "013570", "210540", "115390", "032350", "089860", "000400", "023530", "004000", "286940", "280360", "004990", "005300", "011170", "071840", "027740", "001080", "138040", "008560", "000060", "090370", "017180", "009900", "012690", "005360", "009680", "009580", "009200", "033920", "008420", "025560", "007120", "085620", "006800", "002840", "268280", "107590", "134380", "003650", "377740", "003610", "001340", "035150", "002410", "007210", "002760", "003850", "000890", "003000", "001270", "026940", "011390", "005030", "002070", "100220", "030790", "005180", "003960", "008040", "007160", "014710", "006090", "001470", "006400", "006660", "028260", "207940", "032830", "018260", "028050", "009150", "005930", "001360", "010140", "016360", "068290", "029780", "000810", "006110", "145990", "003230", "002170", "272550", "000070", "002810", "005680", "003720", "023000", "004380", "002450", "004440", "000520", "009770", "005500", "004690", "010960", "004450", "009470", "011230", "001820", "000390", "001290", "041650", "075180", "007540", "248170", "007860", "200880", "017390", "004410", "021050", "008490", "007610", "136490", "014910", "003080", "004980", "011300", "000180", "002420", "004360", "004490", "001430", "306200", "003030", "019440", "058650", "013000", "091090", "021820", "067830", "033530", "075580", "027970", "308170", "012600", "068270", "336370", "248070", "004430", "126720", "017550", "053210", "026890", "134790", "016590", "029530", "004970", "011930", "005390", "004170", "035510", "034300", "031430", "031440", "006880", "005800", "001720", "009270", "002700", "002870", "019170", "055550", "004080", "102280", "003410", "003620", "004770", "015540", "403550", "004920", "112610", "008700", "002790", "090430", "002030", "183190", "002310", "012170", "267850", "020560", "122900", "010780", "139990", "001780", "018250", "161000", "011090", "137310", "005850", "010580", "012750", "023960", "298690", "078520", "015260", "007460", "003060", "244920", "036570", "085310", "097520", "014440", "111770", "009970", "003520", "000670", "006740", "012280", "012160", "015360", "007310", "002630", "271560", "001800", "011690", "070960", "316140", "010050", "006980", "017370", "105840", "010400", "049800", "016880", "095720", "005820", "010600", "008600", "033270", "014830", "446070", "000910", "047400", "011330", "077500", "002920", "000700", "003470", "072130", "000220", "001200", "000100", "003460", "008730", "008250", "025820", "214320", "139480", "007660", "005950", "015020", "093230", "074610", "102460", "084680", "000760", "014990", "101140", "006490", "023800", "034590", "129260", "023810", "249420", "000230", "013360", "003120", "003200", "007110", "007570", "008500", "081000", "020760", "020150", "103590", "271940", "015860", "226320", "317400", "033240", "000950", "194370", "025620", "030000", "271980", "001560", "002620", "006220", "089590", "004910", "004700", "001550", "000480", "120030", "018470", "002600", "185750", "063160", "001630", "044380", "013890", "013870", "071320", "035000", "088790", "003780", "010640", "100250", "051630", "272450", "011000", "002780", "009310", "000650", "033250", "118000", "035720", "323410", "377300", "006380", "109070", "001620", "029460", "281820", "381970", "007810", "003690", "192820", "044820", "005070", "005420", "071950", "002020", "003070", "120110", "138490", "021240", "036420", "031820", "192400", "284740", "015590", "264900", "005740", "259960", "020120", "039490", "014580", "015890", "006890", "003240", "011280", "004100", "009410", "001420", "007980", "055490", "078000", "214420", "019180", "363280", "091810", "004870", "005690", "036580", "004720", "028670", "010820", "016800", "001020", "090080", "010770", "058430", "047050", "003670", "017810", "103140", "005810", "009810", "086790", "293480", "039130", "352820", "071090", "019490", "000080", "000140", "036460", "005430", "071050", "010040", "025540", "004090", "002200", "002960", "000240", "123890", "015760", "006200", "009540", "023350", "025890", "000970", "104700", "017960", "161890", "024720", "161390", "034830", "007280", "010100", "047810", "123690", "003350", "011500", "002390", "053690", "042700", "008930", "128940", "009240", "020000", "003680", "105630", "069640", "016450", "010420", "009180", "213500", "014680", "004710", "004150", "025750", "004960", "011700", "001750", "018880", "009420", "014130", "300720", "002220", "006390", "003300", "051600", "052690", "130660", "002320", "003480", "180640", "005110", "009460", "372910", "000880", "088350", "000370", "009830", "272210", "012450", "003530", "195870", "101530", "143210", "000720", "267270", "005440", "086280", "042670", "064350", "079430", "012330", "010620", "069960", "004560", "004310", "322000", "017800", "307950", "011210", "267260", "004020", "329180", "005380", "001500", "011760", "227840", "126560", "001450", "057050", "093240", "003010", "111110", "008770", "002460", "378850", "241590", "006060", "013520", "010690", "133820", "010660", "000850", "016580", "032560", "004800", "094280", "298040", "298050", "298020", "298000", "093370", "081660", "005870", "079980", "005010", "000540", "003280""###);
        assert_snapshot!(result.len().to_string(), @"796")
    }
}
